package com.leo.hellocomposeimport android.content.Contextimport android.os.Bundleimport android.widget.EditTextimport android.widget.Toastimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.animation.expandHorizontallyimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.text.KeyboardActionsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Favoriteimport androidx.compose.material.icons.filled.Infoimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Surfaceimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.SolidColorimport androidx.compose.ui.graphics.painter.Painterimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.semantics.Roleimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.spimport com.leo.hellocompose.ui.theme.HelloComposeThemeclass MainActivity : ComponentActivity() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContent {            HelloComposeTheme {                // A surface container using the 'background' color from the theme                Surface(                    modifier = Modifier.fillMaxSize(),                    color = MaterialTheme.colorScheme.background                ) {                    Greeting("Android does not sucks or may be ",this)                }            }        }    }}@Composablefun Greeting(name: String,context: Context, modifier: Modifier = Modifier) {    Column (horizontalAlignment = Alignment.CenterHorizontally){        Text(            text = "Hello  $name!",            fontSize = 30.sp,            modifier = modifier        )    }        var text by rememberSaveable { mutableStateOf("hello fr") }    Column(horizontalAlignment = Alignment.CenterHorizontally , verticalArrangement = Arrangement.Center) {        // displaying an simple text       //        also displaying an simple text        Text(            text = "money is power"        )//         this is an editable text ie edittext in xml             TextField(         value = text,         onValueChange = { text = it }, // what to do when value is changed         label = { Text("see i am here its an label")},  // we can label text above the textfield//        isError = true, set for displaying error (red)         placeholder = { Text("it's an hint") },   // place holder are used to give hints to textField when it is empty         leadingIcon = { Icon(Icons.Filled.Favorite, contentDescription = "Localized description") },         trailingIcon = { Icon(Icons.Filled.Info,             contentDescription = "Localized description",Modifier.clickable(enabled = true, onClickLabel = "enter password", Role.Button, onClick = { makeToast("enter pass",context) }))}, // we can apply tint in this trailing and leading icons//         readOnly = true,  it is used to set text only in read mode.//         enabled = false,  will be in accessible to user                //  shape = ,         modifier = modifier     )    }}fun makeToast(message:String,context: Context){    Toast.makeText(context,message, Toast.LENGTH_SHORT).show()}